FROM ubuntu:18.04 AS graphene
ENV http_proxy "http://proxy-dmz.intel.com:911"
ENV https_proxy "http://proxy-dmz.intel.com:912"

RUN echo 'Acquire::http::proxy "http://proxy-dmz.intel.com:911/"; Acquire::https::proxy "http://proxy-dmz.intel.com:912/"; Acquire::ftp::proxy "ftp://proxy-dmz.intel.com:911/";' >> /etc/apt/apt.conf.d/proxy.conf

RUN env DEBIAN_FRONTEND=noninteractive apt-get update \
    && env DEBIAN_FRONTEND=noninteractive apt-get install -y \
        autoconf \
        bison \
        build-essential \
        coreutils \
        gawk \
        git \
        libcurl4-openssl-dev \
        libprotobuf-c-dev \
        meson \
        protobuf-c-compiler \
        python3 \
        python3-pip \
        python3-protobuf \
        wget \
    && python3 -B -m pip install --proxy=http://proxy-dmz.intel.com:911 toml>=0.10

RUN git config --global http.proxy http://proxy-dmz.intel.com:911

RUN git clone {{Graphene.Repository}} /graphene

RUN cd /graphene \
    && git fetch origin {{Graphene.Branch}} \
    && git checkout {{Graphene.Branch}}

{% if SGXDriver.Repository %}
RUN cd /graphene/Pal/src/host/Linux-SGX \
    && git clone {{SGXDriver.Repository}} linux-sgx-driver \
    && cd linux-sgx-driver \
    && git checkout {{SGXDriver.Branch}}
ENV ISGX_DRIVER_PATH "/graphene/Pal/src/host/Linux-SGX/linux-sgx-driver"
{% else %}
ENV ISGX_DRIVER_PATH ""
{% endif %}

RUN cd /graphene \
    && make -s -j WERROR=1 SGX=1 {% if debug %} DEBUG=1 {% endif %} \
    && make -s -j WERROR=1 {% if debug %} DEBUG=1 {% endif %} \
    && meson build --prefix="/graphene/meson_build_output" \
       --buildtype={% if debug %}debug{% else %}release{% endif %} \
       -Ddirect=enabled -Dsgx=enabled \
    && ninja -C build \
    && ninja -C build install
